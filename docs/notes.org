* Opencv Hackery 
  #+BEGIN_SRC python :python ../virtualenv/bin/python :results output
    import cv2
    print(cv2.__version__)
  #+END_SRC

  #+RESULTS:
  : 3.1.0

#+BEGIN_SRC python :python ../virtualenv/bin/python :results output :tangle plane.py
  import numpy as np
  import cv2

  # Load an color image in grayscale
  img = cv2.imread("A350_XWB.jpg",0)
  cv2.imshow('image',img)
  cv2.waitKey(0)
  cv2.destroyAllWindows()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :python ../virtualenv/bin/python  :tangle capture.py
  import numpy as np
  import cv2

  cap = cv2.VideoCapture(0)

  while(True):
      # Capture frame-by-frame
      ret, frame = cap.read()

      # Our operations on the frame come here
      gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

      # Display the resulting frame
      cv2.imshow('frame', gray)
      if cv2.waitKey(1) & 0xFF == ord('q'):
          break

  # When everything done, release the capture
  cap.release()
  cv2.destroyAllWindows()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :python ../virtualenv/bin/python :results output :tangle meanshift.py
  import numpy as np
  import cv2

  cap = cv2.VideoCapture(0)

  # take first frame of the video
  ret,frame = cap.read()

  # setup initial location of window
  r,h,c,w = 250,90,400,125  # simply hardcoded the values
  track_window = (c,r,w,h)

  # set up the ROI for tracking
  roi = frame[r:r+h, c:c+w]
  hsv_roi =  cv2.cvtColor(roi, cv2.COLOR_BGR2HSV)
  mask = cv2.inRange(hsv_roi, np.array((0., 60.,32.)), np.array((180.,255.,255.)))
  roi_hist = cv2.calcHist([hsv_roi],[0],mask,[180],[0,180])
  cv2.normalize(roi_hist,roi_hist,0,255,cv2.NORM_MINMAX)

  # Setup the termination criteria, either 10 iteration or move by atleast 1 pt
  term_crit = ( cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 1 )

  while(1):
      ret ,frame = cap.read()

      if ret == True:
          hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
          dst = cv2.calcBackProject([hsv],[0],roi_hist,[0,180],1)

          # apply meanshift to get the new location
          ret, track_window = cv2.meanShift(dst, track_window, term_crit)

          # Draw it on image
          x,y,w,h = track_window
          img2 = cv2.rectangle(frame, (x,y), (x+w,y+h), 255,2)
          cv2.imshow('img2', img2)

          k = cv2.waitKey(60) & 0xff
          if k == 27:
              break
          else:
              cv2.imwrite(chr(k)+".jpg",img2)

      else:
          break

  cv2.destroyAllWindows()
  cap.release()
#+END_SRC

#+RESULTS:
: Cleaned up camera.

* Docker idea:
  #+BEGIN_SRC dockerfile :tangle Dockerfile :exports both
FROM debian:jessie

MAINTAINER Alexey Kornilov <alexey.kornilov@kavolorn.ru>

RUN apt-get update \
	&& apt-get upgrade -y \
	&& apt-get install -y unzip wget build-essential \
		cmake git pkg-config libswscale-dev \
		python3-dev python3-numpy \
		libtbb2 libtbb-dev libjpeg-dev \
		libpng-dev libtiff-dev libjasper-dev

RUN cd \
	&& wget https://github.com/opencv/opencv/archive/3.1.0.zip \
	&& unzip 3.1.0.zip \
	&& cd opencv-3.1.0 \
	&& mkdir build \
	&& cd build \
	&& cmake .. \
	&& make -j3 \
	&& make install \
	&& cd \
	&& rm 3.1.0.zip

#+END_SRC

  Run it as follows:
  #+BEGIN_SRC bash :exports both
    IMAGE_ID=43544348b261
    docker run -t -i  $IMAGE_ID /bin/bash
  #+END_SRC
